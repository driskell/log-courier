/*
 * Copyright 2012-2020 Jason Woods and contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package grok

import (
	"errors"
	"fmt"
	"regexp"
)

var (
	// ErrNoMatch is returned when the pattern did not match
	ErrNoMatch = errors.New("Grok pattern did not match")
)

// ApplyCallback is a function called for each named match so it can be stored
type ApplyCallback func(name string, value interface{}) error

// Pattern can be used to match a string and parse it into
// named fields as specified by the pattern
type Pattern interface {
	// String returns the pattern source
	String() string
	// Apply the pattern to the given string, and call the callback with the results
	// Returns ErrNoMatch if no match
	Apply(string, ApplyCallback) error
}

// compiledPattern implements the Pattern interface
type compiledPattern struct {
	pattern string
	types   map[string]TypeHint

	re    *regexp.Regexp
	names []string
}

// newCompiledPatterns returns a new compiledPattern instance for the given static pattern
func newCompiledPattern(pattern string) *compiledPattern {
	return &compiledPattern{
		pattern: pattern,
		types:   map[string]TypeHint{},
	}
}

// newCompiledPatternFromState returns a new compiledPattern instance for the pattern
// generated by the given compilation state
func newCompiledPatternFromState(state *compilationState) *compiledPattern {
	return &compiledPattern{
		pattern: state.output,
		types:   state.types,
	}
}

// init builds the pattern
func (c *compiledPattern) init() (err error) {
	c.re, err = regexp.Compile(c.pattern)
	if err != nil {
		return fmt.Errorf("Failed to compile pattern '%s': %s", c.pattern, err)
	}
	c.names = c.re.SubexpNames()
	return
}

// String returns the pattern source
func (c *compiledPattern) String() string {
	return c.pattern
}

// Apply the pattern to the given string
func (c *compiledPattern) Apply(message string, callback ApplyCallback) error {
	results := c.re.FindStringSubmatch(message)
	if results == nil {
		return ErrNoMatch
	}

	for idx := 1; idx < len(results); idx++ {
		name := c.names[idx]
		if name == "" {
			// Unnamed, skip
			continue
		}

		var value interface{}
		if typeHint, ok := c.types[name]; ok {
			value = convertToType(results[idx], typeHint)
		} else {
			value = results[idx]
		}

		err := callback(name, value)
		if err != nil {
			return err
		}
	}
	return nil
}
