/*
 * Copyright 2014-2015 Jason Woods.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package grok

import "regexp"

// Pattern can be used to match a string and parse it into
// named fields as specified by the pattern
type Pattern interface {
	// String returns the pattern source
	String() string
	// Apply the pattern to the given string, and return the results
	// Returns nil map if no match was found
	Apply(string) (map[string]interface{}, error)
}

// compiledPattern implements the Pattern interface
type compiledPattern struct {
	pattern string
	types   map[string]string
	re      *regexp.Regexp
}

// newCompiledPatterns returns a new compiledPattern instance for the given static pattern
func newCompiledPattern(pattern string) *compiledPattern {
	return &compiledPattern{
		pattern: pattern,
		types:   map[string]string{},
	}
}

// newCompiledPatternFromState returns a new compiledPattern instance for the pattern
// generated by the given compilation state
func newCompiledPatternFromState(state *compilationState) *compiledPattern {
	return &compiledPattern{
		pattern: state.output,
		types:   state.types,
	}
}

// init builds the pattern
func (c *compiledPattern) init() (err error) {
	c.re, err = regexp.Compile(c.pattern)
	return
}

// String returns the pattern source
func (c *compiledPattern) String() string {
	return c.pattern
}

// Apply the pattern to the given string
func (c *compiledPattern) Apply(message string) (map[string]interface{}, error) {
	return nil, nil
}
